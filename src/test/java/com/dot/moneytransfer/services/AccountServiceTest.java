package com.dot.moneytransfer.services;
// Generated by CodiumAI

import ch.qos.logback.core.model.Model;
import com.dot.moneytransfer.entity.AccountEntity;
import com.dot.moneytransfer.repository.AccountRepository;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.modelmapper.ModelMapper;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;


class AccountServiceTest {



    // Successfully update balance by debiting the account
    @Test
    void test_update_balance_debit_success() {
        AccountRepository accountRepository = Mockito.mock(AccountRepository.class);
        ModelMapper modelMapper = Mockito.mock(ModelMapper.class);
        AccountService accountService = new AccountService(accountRepository, modelMapper);
    
        String accountNumber = "123456";
        AccountEntity account = new AccountEntity();
        account.setAccountNumber(accountNumber);
        account.setBalance(BigDecimal.valueOf(1000));
    
        Mockito.when(accountRepository.findByAccountNumber(accountNumber)).thenReturn(account);
        Mockito.when(accountRepository.save(Mockito.any(AccountEntity.class))).thenReturn(account);
    
        AccountEntity updatedAccount = accountService.updateBalance(accountNumber, true, 200);
    
        assertEquals(BigDecimal.valueOf(800.0), updatedAccount.getBalance());
        Mockito.verify(accountRepository).findByAccountNumber(accountNumber);
        Mockito.verify(accountRepository).save(updatedAccount);
    }

    // Update balance when debit is true and amount is positive
    @Test
     void test_update_balance_debit_positive_amount() {
        AccountRepository accountRepository = Mockito.mock(AccountRepository.class);
        ModelMapper modelMapper = Mockito.mock(ModelMapper.class);
        AccountService accountService = new AccountService(accountRepository, modelMapper);
    
        String accountNumber = "123456";
        AccountEntity account = new AccountEntity();
        account.setAccountNumber(accountNumber);
        account.setBalance(BigDecimal.valueOf(1000));
    
        Mockito.when(accountRepository.findByAccountNumber(accountNumber)).thenReturn(account);
        Mockito.when(accountRepository.save(Mockito.any(AccountEntity.class))).thenReturn(account);
    
        AccountEntity updatedAccount = accountService.updateBalance(accountNumber, true, 100);
    
        assertEquals(BigDecimal.valueOf(900.0), updatedAccount.getBalance());
        Mockito.verify(accountRepository).save(account);
    }

    // Attempt to update balance with a non-existent account number
    @Test
    void test_update_balance_non_existent_account() {
        AccountRepository accountRepository = Mockito.mock(AccountRepository.class);
        ModelMapper modelMapper = Mockito.mock(ModelMapper.class);
        AccountService accountService = new AccountService(accountRepository, modelMapper);
    
        String accountNumber = "nonexistent";
    
        Mockito.when(accountRepository.findByAccountNumber(accountNumber)).thenReturn(null);
    
        assertThrows(NullPointerException.class, () -> {
            accountService.updateBalance(accountNumber, true, 200);
        });
    
        Mockito.verify(accountRepository).findByAccountNumber(accountNumber);
    }

    // Update balance with zero amount
    @Test
    public void test_update_balance_zero_amount() {
        AccountRepository accountRepository = Mockito.mock(AccountRepository.class);
        ModelMapper modelMapper = Mockito.mock(ModelMapper.class);
        AccountService accountService = new AccountService(accountRepository, modelMapper);
    
        String accountNumber = "123456";
        AccountEntity account = new AccountEntity();
        account.setAccountNumber(accountNumber);
        account.setBalance(BigDecimal.valueOf(1000));
    
        Mockito.when(accountRepository.findByAccountNumber(accountNumber)).thenReturn(account);
        Mockito.when(accountRepository.save(Mockito.any(AccountEntity.class))).thenReturn(account);
    
        AccountEntity updatedAccount = accountService.updateBalance(accountNumber, true, 0);
    
        assertEquals(BigDecimal.valueOf(1000.0), updatedAccount.getBalance());
        Mockito.verify(accountRepository).save(account);
    }
}